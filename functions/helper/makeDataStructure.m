function pdData = makeDataStructure(dataDir,channels,dataType,exptName,condDesc,newChanMap)
% pdData = makeDataStructure(dataDir,channels,dataType,[exptName],[condDesc],[newChanMap])
%  
%   Generates an array of structures of sweep data for later fitting,
%   plotting, etc. The structure contains all the data for the selected
%   channels. Each array entry contains a specified condition & channel.
%   All frequencies are reported in each dataMatrix. The frequency
%   labels are contained in the pdData.freqsAnalyzed field.
% INPUTS:
%   dataDir      : Path to the files containing the data, typically files
%                  like 'DFT_c001.txt'
%   channels     : Vector of channel numbers to keep (hardcoded for 128
%                  channel data ###) between 1-128. If this is provided,
%                  the user needs to make sure it is consistent with the
%                  new channel map (described below) -- i.e., the user must
%                  make sure that the values provided in 'channels' are
%                  also values in the new channel map. If they are not in
%                  the new channel map, they will not be in the data
%                  matrix. The data matrix of the returned data structure
%                  will be empty.
%   dataType     : String 'DFT' or 'RLS' (default)
%   [exptName]   : String containing the experiment name
%   [condDesc]   : Cell array of strings, one for each condition,
%                  indicating their names
%   [newChanMap] : This is a map which is required when the data file 'iCh'
%                  values are not of the form hc%d. This function will use
%                  the new channel map to convert the default channel
%                  numbers generated by getSweepDataFlex.m to the user
%                  specified channel numbers. The user must be wary of the
%                  datafile's 'iCh' values and make sure that newChanMap is
%                  provided when necessary. This map maps strings to
%                  doubles.
%
% Fields of pdData are:
%   dateDataFileRead
%   dateDataFile
%   experimentName
%   path
%   dataFile
%   conditionName
%   conditionNumber
%   channel
%   freqsAnalyzed
%   binLevels
%   hdrFields
%   dataMatrix

% Typically, if an argument is not passed by the user, they would use '[]'
% There are the 'isempty' conditions because the user may choose to pass in
% an argument for newChanMap, but not for condDesc, in which case the user
% would pass in [] for condDesc.

if (nargin<3) || (isempty(dataType))
    dataType = 'RLS';
    print('No data type specified. Default (RLS) is assumed.\n')
end
if (nargin<4) || (isempty(exptName))
    exptName = input('Provide the name of the current experiment>>', 's');
end

nChan = length(channels);
fileList = dir(sprintf('%s/%s*.txt',dataDir,dataType));
nConds = size(fileList,1);

if (nargin<5) || (isempty(condDesc))
    condDesc = cell(1,nConds);
end

% If new channel map is not specified by user, it means that the datafile
% iCh values are of the form hc%d. Otherwise, it must be specified so
% getSweepDataFlex.m can do the new channel mappings.

if (nargin<6) || (isempty(newChanMap))
    newChanMap = containers.Map;
end

oldChannels = channels;
pdData = struct([]);
for k=1:nConds
    fileCrntCond = fileList(k).name;
    fullPathToFile = [dataDir,'/',fileCrntCond];
    if isempty(condDesc{k})
        conditionName = input(sprintf('Condition stored in file %s (%d/%d). Name the condition>>',fileCrntCond,k,nConds), 's');
    else
        conditionName = condDesc{k};
    end
    fprintf('Loading data in %s (%d/%d)...',fileCrntCond,k,nConds);
    
    [hdrFields, freqsIncl, binLevels, dataMatrix, oldChanMap] = getSweepDataFlex(fullPathToFile, channels);
    
    % If not 0, means that data file channels are not of the form hc%d and
    % do the channel number conversion. If 'channels' is not an empty list,
    % meaning that the user specified some channels to filter based on the
    % default channel mapping in getSweepDataFlex.m (i.e. 1,2,3,...) (see 
    % example.m), then must update the channel names to those provided by 
    % the user in the new channel naming map (so that it is reflected in 
    % the pd data structure). Otherwise, if 'channels' is empty, just use 
    % all the channels in the data file as default.
    if oldChanMap.Count ~= 0
        [dataMatrix, oldToNewMap] = changeChanNames(hdrFields, dataMatrix, oldChanMap, newChanMap);
        if ~isempty(channels)
            for n = 1:length(channels)
                channels(n) = oldToNewMap(channels(n));
            end
        else
            assert(isempty(channels));
            channels = cell2mat(values(newChanMap));
        end
    end
    
    channelColumn = strcmp(hdrFields,'iCh'); 
    fileInfo = dir(fullPathToFile);

    if size(dataMatrix,1) == 1
        fprintf('ERROR! Data matrix not filled in for %s\n',fileCrntCond);
    else
        for j=1:nChan
            pdData(k,j).dateDataFileRead = date;
            pdData(k,j).dateDataFile = fileInfo.date;
            pdData(k,j).experimentName = exptName;
            pdData(k,j).dataFile = fileCrntCond;
            pdData(k,j).conditionName = conditionName;
            pdData(k,j).conditionNumber = k;
            pdData(k,j).hdrFields = hdrFields;
            pdData(k,j).channel = channels(j);
            pdData(k,j).freqsAnalyzed = freqsIncl;
            pdData(k,j).binLevels = binLevels;
            
            rowIxCrntChan = ismember(int16(dataMatrix(:, channelColumn)),int16(channels(j)));
            pdData(k,j).dataMatrix = dataMatrix(rowIxCrntChan,:);
        end
        fprintf('Done.\n');
    end
    % Reset channel vector for the next data file
    channels = oldChannels;
end

