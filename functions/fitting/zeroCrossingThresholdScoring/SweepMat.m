function [tSweepMat] = SweepMat( tRLSMat, originalPValCalculation )% [tSweepMat] = SweepMat( tRLSMat, [originalPValCalculation] )% Convert a 3-D matrix that is NSteps x 6(triad terms) x NSubjects(or NTrials) % to a 2-D matrix that is NSteps x 5 sweep stats (see below) ready for threshold scoring by HybridNewOldScore%% This is code from Mark Pettet%% Updated 1/2016 by Holly Gerhard to use the p values calculated using% Hotelling's t-squared test against a mean equal to [0,0] instead of the% previously used p values calculated in Mark's code. If one wants to still% use the original way, one should pass the optional parameter% originalPValCalculation as true.%% It's not clear, but Mark's pvalues might be calucated following Victor & % Mast's t_circ squared. Norcia lab protocol is to use this calculation only if% all samples come from a single subject.if nargin<2    originalPValCalculation = false;endtN = size( tRLSMat, 3 );tRLSMean = nanmean( tRLSMat, 3 );tSr = tRLSMean( :, 1 );tSi = tRLSMean( :, 2 );tN1r = tRLSMean( :, 3 );tN1i = tRLSMean( :, 4 );tN2r = tRLSMean( :, 5 );tN2i = tRLSMean( :, 6 );tSweepMat( :, 1 ) = abs( tSr + tSi * 1i ); % Signal magnitudetSweepMat( :, 2 ) = nanmean( [ abs( tN1r + tN1i * 1i ) abs( tN2r + tN2i * 1i ) ], 2 ); % Mean noise magnitudetSweepMat( :, 3 ) = atan2( tSi, tSr ) * 180 / pi; % Signal phase in degreestSweepMat( :, 4 ) = tSweepMat( :, 1 ) ./ mean( tSweepMat( :, 2 ), 1 ); % SNRif originalPValCalculation    % The following comment is from Mark:        % PVal is fudged a little to get close to the same result as PowerDIVA and Excel.        % Here we use (tN-1) in the numerator of the F-ratio; PowerDIVA and Excel use tN.        % Still only accurate to about the 3rd decimal place.    tVSr = nanvar( squeeze( tRLSMat( :, 1, : ) )' )';    tVSi = nanvar( squeeze( tRLSMat( :, 2, : ) )' )';    tSweepMat( :, 5 ) = fpdf( ( ( tSr .^ 2 + tSi .^ 2 ) * ( tN - 1 ) ) ./ ( tVSr + tVSi ), 2, 2 * tN - 2 );else    for tStep = 1:size( tRLSMat, 1 )        xyData = squeeze( tRLSMat( tStep, 1:2, : ) )'; %[tN x 2] matrix        testResults = tSquaredFourierCoefs( xyData ); % returns the p value from running a t^2 test against mean = [0,0]        tSweepMat( tStep, 5 ) = testResults.pVal;    endend                                    